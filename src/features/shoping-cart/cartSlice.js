import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { addToCart, fetchItemByUser, updateCartItems, deleteCartItem, resetCart } from './cartApi';

const initialState = {
  items: null,
  status: 'idle',
};

// typically used to make async requests.
export const addToCartAsync = createAsyncThunk(
  'cart/addToCart',
  async (item) => {
    const response = await addToCart(item);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// update cart items
export const updateCartItemsAsync = createAsyncThunk(
  'cart/updateCartItems',
  async (update) => {
    const response = await updateCartItems(update);
    // The value we return becomes the `fulfilled` action payload
    console.log(response.data);
    return response.data;
  }
)
;
// delete cart items
export const deleteCartItemAsync = createAsyncThunk(
  'cart/deleteCartItem',
  async (itemId) => {
    const response = await deleteCartItem(itemId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

//cart item get by user id 
export const fetchItemByUserAsync = createAsyncThunk(
  'cart/fetchItemByUser',
  async (userId) => {
    const response = await fetchItemByUser(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

//reset cart item get by user id 
export const resetCartAsync = createAsyncThunk(
  'cart/resetCart',
  async (userId) => {
    const response = await resetCart(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload)
      })
      .addCase(fetchItemByUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchItemByUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = action.payload
      })
      .addCase(updateCartItemsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateCartItemsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item=>item.id === action.payload.id);
        state.items[index] = action.payload;
      })
      .addCase(deleteCartItemAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteCartItemAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item=>item.id === action.payload.id);
        state.items.splice(index,1)
      })
      .addCase(resetCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(resetCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = [];
      })
  },
});

export const { } = cartSlice.actions;

// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCartItem = (state) => state.cart.items;

export default cartSlice.reducer;
