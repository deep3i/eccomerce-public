import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { addToCart  } from './cartApi';

const initialState = {
  items: null,
  status: 'idle',
};

// typically used to make async requests.
export const addToCartAsync = createAsyncThunk(
  'cart/addToCart',
  async (item) => {
    // const response = await addToCart(item);
    // The value we return becomes the `fulfilled` action payload
    // return response.data;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload)
      })
  },
});

export const { } = userSlice.actions;

// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCartItem = (state) => state.cart.items;

export default userSlice.reducer;
