import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { checkUser, createUsers, updateUser } from "./authApi";

const initialState = {
  loggedInUser: null,
  status: "idle",
  error:null
};

// typically used to make async requests.
export const createUsersAsync = createAsyncThunk(
  "users/createUsers",
  async (userData) => {
    const response = await createUsers(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// typically used to make async requests. login auth
export const checkUserAsync = createAsyncThunk(
  "users/checkUser",
  async (loginInfo) => {
    const response = await checkUser(loginInfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// typically used to make async requests. login auth
export const updateUserAsync = createAsyncThunk(
  "users/updateUser",
  async (update) => {
    const response = await updateUser(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const authSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUsersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error = action.error
      })
      .addCase(updateUserAsync.pending, (state, action) => {
        state.status = "loading";
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUser = action.payload;
      })
  },
});

export const {} = authSlice.actions;

// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLoggedInUser = (state) => state.auth.loggedInUser;
export const selectError = (state) => state.auth.error

export default authSlice.reducer;
